import { AnimatePresence, motion } from "framer-motion";
import { ChevronDown } from "lucide-react";
import Head from "next/head";
import { useEffect, useState, type ReactNode } from "react";
import { Button } from "~/components/ui/button";
import { cn } from "~/lib/utils";

export default function Home() {
  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center bg-neutral-950 text-neutral-200">
        <Tabs />
      </main>
    </>
  );
}

const Tabs = () => {
  const [selected, setSelected] = useState<number | null>(0);
  const [direction, setDirection] = useState<"l" | "r" | null>(null);

  const handleSelected = (val: number | null) => {
    if (typeof selected === "number" && typeof val === "number") {
      setDirection(selected > val ? "r" : "l");
    } else if (val === null) {
      setDirection(null);
    }

    setSelected(val);
  };

  return (
    <div
      onMouseLeave={() => {
        handleSelected(null);
      }}
      className="relative flex h-fit gap-2"
    >
      {TABS.map((tab, i) => {
        return (
          <Tab
            key={i}
            handleSelected={handleSelected}
            selected={selected}
            tab={i}
          >
            {tab.title}
          </Tab>
        );
      })}

      <AnimatePresence>
        {selected !== null && (
          <Content direction={direction} selected={selected} />
        )}
      </AnimatePresence>
    </div>
  );
};

type TabProps = {
  children: ReactNode;
  handleSelected: (val: number | null) => void;
  selected: number | null;
  tab: number;
};

const Tab = ({ children, handleSelected, selected, tab }: TabProps) => {
  return (
    <Button
      id={`shift-tab-${tab}`}
      onMouseEnter={() => {
        handleSelected(tab);
      }}
      onClick={() => {
        handleSelected(tab); // for mobile
      }}
      variant="ghost"
      className={cn(
        "flex items-center gap-1 rounded-full px-3 py-1.5 text-sm transition-colors",
        selected === tab
          ? "bg-neutral-800 text-neutral-100"
          : "text-neutral-400",
      )}
    >
      <span>{children}</span>
      <ChevronDown
        className={cn("transition-transform", selected === tab && "rotate-180")}
      />
    </Button>
  );
};

type ContentProps = { direction: "l" | "r" | null; selected: number | null };

const Content = ({ direction, selected }: ContentProps) => {
  return (
    <motion.div
      id="overlay-content"
      initial={{
        opacity: 0,
        y: 8,
      }}
      animate={{
        opacity: 1,
        y: 0,
      }}
      exit={{
        opacity: 0,
        y: 8,
      }}
      className="absolute left-0 top-[calc(100%+24px)] w-96 rounded-lg border border-neutral-600 bg-gradient-to-b from-neutral-900 via-neutral-900 to-neutral-800 p-4"
    >
      <Bridge />
      <Nub selected={selected} />
      {TABS.map((tab, i) => {
        return (
          <div key={i} className="overflow-hidden">
            {selected === i && (
              <motion.div
                initial={{
                  opacity: 0,
                  x: direction === "l" ? 100 : direction === "r" ? -100 : 0,
                }}
                animate={{ opacity: 1, x: 0 }}
                transition={{
                  duration: 0.25,
                  ease: "easeInOut",
                }}
              >
                {tab.content()}
              </motion.div>
            )}
          </div>
        );
      })}
    </motion.div>
  );
};

type NubProps = { selected: number | null };

const Nub = ({ selected }: NubProps) => {
  const [left, setLeft] = useState(0);

  useEffect(() => {
    if (selected !== null) {
      const hoveredTab = document.getElementById(`shift-tab-${selected}`);
      const overlayContent = document.getElementById("overlay-content");

      if (!hoveredTab || !overlayContent) return;

      const tabRect = hoveredTab.getBoundingClientRect();
      const { left: contentLeft } = overlayContent.getBoundingClientRect();

      const tabCenter = tabRect.left + tabRect.width / 2 - contentLeft;

      setLeft(tabCenter);
    }
  }, [selected]);

  return (
    <motion.span
      animate={{ left }}
      transition={{ duration: 0.25, ease: "easeInOut" }}
      className="absolute left-1/2 top-0 h-4 w-4 -translate-x-1/2 -translate-y-1/2 rotate-45 rounded-tl border-l border-t border-neutral-600 bg-neutral-900"
    />
  );
};

const Bridge = () => {
  return <div className="absolute -top-[24px] left-0 right-0 h-[24px]"></div>;
};

type TabType = { title: string; content: () => ReactNode };

const TABS: TabType[] = [
  {
    title: "Tab 1",
    content: () => <div>content 1</div>,
  },
  {
    title: "Tab 2",
    content: () => <div>content 2</div>,
  },
  {
    title: "Tab 3",
    content: () => <div>content 3</div>,
  },
];
